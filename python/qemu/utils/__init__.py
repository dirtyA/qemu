"""
QEMU development and testing utilities

This package provides a small handful of utilities for performing
various tasks not directly related to the launching of a VM.
"""

# Copyright (C) 2021 Red Hat Inc.
#
# Authors:
#  John Snow <jsnow@redhat.com>
#  Cleber Rosa <crosa@redhat.com>
#
# This work is licensed under the terms of the GNU GPL, version 2.  See
# the COPYING file in the top-level directory.
#

import os
import re
import shutil
import textwrap
from typing import Optional

# pylint: disable=import-error
from .accel import kvm_available, list_accel, tcg_available


__all__ = (
    'enboxify',
    'get_info_usernet_hostfwd_port',
    'kvm_available',
    'list_accel',
    'tcg_available',
)


def get_info_usernet_hostfwd_port(info_usernet_output: str) -> Optional[int]:
    """
    Returns the port given to the hostfwd parameter via info usernet

    :param info_usernet_output: output generated by hmp command "info usernet"
    :return: the port number allocated by the hostfwd option
    """
    for line in info_usernet_output.split('\r\n'):
        regex = r'TCP.HOST_FORWARD.*127\.0\.0\.1\s+(\d+)\s+10\.'
        match = re.search(regex, line)
        if match is not None:
            return int(match[1])
    return None


# pylint: disable=too-many-arguments
def enboxify(
        content: str = '',
        width: Optional[int] = None,
        name: Optional[str] = None,
        padding: int = 1,
        upper_left: str = '┏',
        upper_right: str = '┓',
        lower_left: str = '┗',
        lower_right: str = '┛',
        horizontal: str = '━',
        vertical: str = '┃',
) -> str:
    """
    Wrap some text into a text art box of a given width.

    :param content: The text to wrap into a box.
    :param width: The number of columns (including the box itself).
    :param name: A label to apply to the upper-left of the box.
    :param padding: How many columns of padding to apply inside.
    """
    if width is None:
        width = shutil.get_terminal_size()[0]
    prefix = vertical + (' ' * padding)
    suffix = (' ' * padding) + vertical
    lwidth = width - len(suffix)

    def _bar(name: Optional[str], top: bool = True) -> str:
        ret = upper_left if top else lower_left
        right = upper_right if top else lower_right
        if name is not None:
            ret += f"{horizontal} {name} "

        assert width is not None
        filler_len = width - len(ret) - len(right)
        ret += f"{horizontal * filler_len}{right}"
        return ret

    def _wrap(line: str) -> str:
        return os.linesep.join([
            wrapped_line.ljust(lwidth) + suffix
            for wrapped_line in textwrap.wrap(
                    line, width=lwidth, initial_indent=prefix,
                    subsequent_indent=prefix, replace_whitespace=False,
                    drop_whitespace=False, break_on_hyphens=False)
        ])

    return os.linesep.join((
        _bar(name, top=True),
        os.linesep.join(_wrap(line) for line in content.splitlines()),
        _bar(None, top=False),
    ))
