# -*- Mode: Python -*-
#
# Copyright (c) 2021 Oracle and/or its affiliates.
#
# This work is licensed under the terms of the GNU GPL, version 2.
# See the COPYING file in the top-level directory.

##
# = CPR - CheckPoint and Restart
##

{ 'include': 'common.json' }

##
# @CprMode:
#
# @reboot: checkpoint can be cpr-load'ed after a host kexec reboot.
# @restart: checkpoint can be cpr-load'ed after restarting qemu.
#
# Since: 6.2
##
{ 'enum': 'CprMode',
  'data': [ 'reboot', 'restart' ] }

##
# @cpr-save:
#
# Create a checkpoint of the virtual machine device state in @filename.
# Unlike snapshot-save, this command completes synchronously, saves state
# to an ordinary file, and does not save guest RAM or guest block device
# blocks.  The caller must not modify guest block devices between cpr-save
# and cpr-load.
#
# For reboot mode, all guest RAM objects must be non-volatile across reboot,
# and created with the share=on parameter.
#
# For restart mode, all guest RAM objects must be shared.  The share=on
# property is required for memory created with an explicit -object option,
# and the memfd-alloc machine property is required for memory that is
# implicitly created.
#
# @filename: name of checkpoint file
# @mode: @CprMode mode
#
# Since: 6.2
##
{ 'command': 'cpr-save',
  'data': { 'filename': 'str',
            'mode': 'CprMode' } }

##
# @cpr-exec:
#
# exec() a command and replace the qemu process.  The PID remains the same.
# @argv[0] should be the path of a new qemu binary, or a prefix command that
# in turn exec's the new qemu binary.  Must be called after cpr-save restart.
#
# @argv: arguments to be passed to exec().
#
# Since: 6.2
##
{ 'command': 'cpr-exec',
  'data': { 'argv': [ 'str' ] } }

##
# @cpr-load:
#
# Start virtual machine from checkpoint file that was created earlier using
# the cpr-save command.
#
# @filename: name of checkpoint file
#
# Since: 6.2
##
{ 'command': 'cpr-load',
  'data': { 'filename': 'str' } }
