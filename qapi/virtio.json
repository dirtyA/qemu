# -*- Mode: Python -*-
# vim: filetype=python
#

##
# = Virtio devices
##

##
# @VirtioInfo:
#
# Basic information about a given VirtIODevice
#
# @path: the device's canonical QOM path
#
# @type: VirtIO device name
#
# Since: 6.3
#
##
{ 'struct': 'VirtioInfo',
  'data': { 'path': 'str',
            'type': 'str' } }

##
# @x-query-virtio:
#
# Returns a list of all realized VirtIO devices
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: list of gathered @VirtioInfo devices
#
# Since: 6.3
#
# Example:
#
# -> { "execute": "x-query-virtio" }
# <- { "return": [ { "path": "/machine/peripheral-anon/device[4]/virtio-backend",
#                    "type": "virtio-input" },
#                  { "path": "/machine/peripheral/crypto0/virtio-backend",
#                    "type": "virtio-crypto" },
#                  { "path": "/machine/peripheral-anon/device[2]/virtio-backend",
#                    "type": "virtio-scsi" },
#                  { "path": "/machine/peripheral-anon/device[1]/virtio-backend",
#                    "type": "virtio-net" },
#                  { "path": "/machine/peripheral-anon/device[0]/virtio-backend",
#                    "type": "virtio-serial" }
#                ] }
#
##

{ 'command': 'x-query-virtio', 'returns': ['VirtioInfo'],
  'features': [ 'unstable' ] }

##
# @VirtioStatusEndianness:
#
# Enumeration of endianness for VirtioDevice
#
# Since: 6.3
##

{ 'enum': 'VirtioStatusEndianness',
  'data': [ 'unknown', 'little', 'big' ]
}

##
# @VirtioType:
#
# An enumeration of Virtio device types (or names)
#
# Since: 6.3
##

{ 'enum': 'VirtioType',
  'data': [ 'virtio-net', 'virtio-blk', 'virtio-serial', 'virtio-rng',
            'virtio-balloon', 'virtio-iomem', 'virtio-rpmsg',
            'virtio-scsi', 'virtio-9p', 'virtio-mac-wlan',
            'virtio-rproc-serial', 'virtio-caif', 'virtio-mem-balloon',
            'virtio-gpu', 'virtio-clk', 'virtio-input', 'vhost-vsock',
            'virtio-crypto', 'virtio-signal', 'virtio-pstore',
            'virtio-iommu', 'virtio-mem', 'virtio-sound', 'vhost-user-fs',
            'virtio-pmem', 'virtio-mac-hwsim', 'vhost-user-i2c',
            'virtio-bluetooth' ]
}

##
# @VirtioConfigStatus:
#
# An enumeration of Virtio device configuration statuses
#
# Since: 6.3
##

{ 'enum': 'VirtioConfigStatus',
  'data': [ 'driver-ok', 'features-ok', 'driver', 'needs-reset',
            'failed', 'acknowledge' ]
}

##
# @VirtioDeviceStatus:
#
# A structure defined to list the configuration statuses of a virtio
# device
#
# @dev-status: List of decoded configuration statuses of the virtio
#              device
#
# @unknown-statuses: virtio device statuses bitmap that have not been decoded
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceStatus',
  'data': { 'dev-status': [ 'VirtioConfigStatus' ],
            '*unknown-statuses': 'uint8' } }

##
# @VhostProtocolFeature:
#
# An enumeration of Vhost User protocol features
#
# Since: 6.3
##

{ 'enum': 'VhostProtocolFeature',
  'data': [ 'mq', 'log-shmfd', 'rarp', 'reply-ack', 'net-mtu',
            'slave-req', 'cross-endian', 'crypto-session', 'pagefault',
            'config', 'slave-send-fd', 'host-notifier',
            'inflight-shmfd', 'reset-device', 'inband-notifications',
            'configure-mem-slots' ]
}

##
# @VhostDeviceProtocols:
#
# A structure defined to list the vhost user protocol features of a
# Vhost User device
#
# @features: List of decoded vhost user protocol features of a vhost
#            user device
#
# @unknown-protocols: vhost user device protocol features bitmap that
#                     have not been decoded
#
# Since: 6.3
##

{ 'struct': 'VhostDeviceProtocols',
  'data': { 'features': [ 'VhostProtocolFeature' ],
            '*unknown-protocols': 'uint64' } }

##
# @VirtioTransportFeature:
#
# An enumeration of Virtio device transport features, including virtio-ring
#
# Since: 6.3
##

{ 'enum': 'VirtioTransportFeature',
  'data': [ 'notify-on-empty', 'any-layout', 'protocol-features',
            'version-1', 'iommu-platform', 'ring-packed', 'order-platform',
            'sr-iov', 'indirect-desc', 'event-idx' ]
}

##
# @VirtioMemFeature:
#
# An enumeration of Virtio mem features
#
# Since: 6.3
##

{ 'enum': 'VirtioMemFeature',
  'data': [ 'acpi-pxm' ]
}

##
# @VirtioSerialFeature:
#
# An enumeration of Virtio serial/console features
#
# Since: 6.3
##

{ 'enum': 'VirtioSerialFeature',
  'data': [ 'size', 'multiport', 'emerg-write' ]
}

##
# @VirtioBlkFeature:
#
# An enumeration of Virtio block features
#
# Since: 6.3
##

{ 'enum': 'VirtioBlkFeature',
  'data': [ 'size-max', 'seg-max', 'geometry', 'ro', 'blk-size',
            'topology', 'mq', 'discard', 'write-zeroes', 'barrier',
            'scsi', 'flush', 'config-wce', 'log-all' ]
}

##
# @VirtioGpuFeature:
#
# An enumeration of Virtio gpu features
#
# Since: 6.3
##

{ 'enum': 'VirtioGpuFeature',
  'data': [ 'virgl', 'edid', 'resource-uuid', 'resource-blob',
            'log-all' ]
}

##
# @VirtioNetFeature:
#
# An enumeration of Virtio net features
#
# Since: 6.3
##

{ 'enum': 'VirtioNetFeature',
  'data': [ 'csum', 'guest-csum', 'ctrl-guest-offloads', 'mtu', 'mac',
            'guest-tso4', 'guest-tso6', 'guest-ecn', 'guest-ufo',
            'host-tso4', 'host-tso6', 'host-ecn', 'host-ufo',
            'mrg-rxbuf', 'status', 'ctrl-vq', 'ctrl-rx', 'ctrl-vlan',
            'ctrl-rx-extra', 'guest-announce', 'mq', 'ctrl-mac-addr',
            'hash-report', 'rss', 'rsc-ext', 'standby', 'speed-duplex',
            'gso', 'virtio-net-hdr', 'log-all' ]
}

##
# @VirtioScsiFeature:
#
# An enumeration of Virtio scsi features
#
# Since: 6.3
##

{ 'enum': 'VirtioScsiFeature',
  'data': [ 'inout', 'hotplug', 'change', 't10-pi', 'log-all' ]
}

##
# @VirtioBalloonFeature:
#
# An enumeration of Virtio balloon features
#
# Since: 6.3
##

{ 'enum': 'VirtioBalloonFeature',
  'data': [ 'must-tell-host', 'stats-vq', 'deflate-on-oom',
            'free-page-hint', 'page-poison', 'reporting' ]
}

##
# @VirtioIommuFeature:
#
# An enumeration of Virtio iommu features
#
# Since: 6.3
##

{ 'enum': 'VirtioIommuFeature',
  'data': [ 'input-range', 'domain-range', 'map-unmap', 'bypass',
            'probe', 'mmio' ]
}

##
# @VirtioInputFeature:
#
# An enumeration of Virtio input features. Note that virtio-input
# has no device-specific features except when its vhost is active,
# then it may have the VHOST_F_LOG_ALL feature.
#
# Since: 6.3
##

{ 'enum': 'VirtioInputFeature',
  'data': [ 'log-all' ]
}

##
# @VhostUserFsFeature:
#
# An enumeration of vhost user FS features. Note that vhost-user-fs
# has no device-specific features other than the vhost-common
# VHOST_F_LOG_ALL feature.
#
# Since: 6.3
##

{ 'enum': 'VhostUserFsFeature',
  'data': [ 'log-all' ]
}

##
# @VhostVsockFeature:
#
# An enumeration of vhost vsock features. Note that vhost-vsock has
# no device-specific features other than the vhost-common
# VHOST_F_LOG_ALL feature.
#
# Since: 6.3
##

{ 'enum': 'VhostVsockFeature',
  'data': [ 'log-all' ]
}

##
# @VirtioCryptoFeature:
#
# An enumeration of virtio crypto features. Not that virtio-crypto
# has no device-specific features other than when it is a vhost
# device, then it may have the VHOST_F_LOG_ALL feature.
#
# Since: 6.3
##

{ 'enum': 'VirtioCryptoFeature',
  'data': [ 'log-all' ]
}

##
# @VirtioDeviceFeaturesBase:
#
# The common fields that apply to all Virtio devices
#
# @type: virtio device name
# @transport: the list of transport features of the virtio device
# @unknown-features: virtio device features bitmap that have not been decoded
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesBase',
  'data': { 'type': 'VirtioType',
            'transport': [ 'VirtioTransportFeature' ],
            '*unknown-features': 'uint64' } }

##
# @VirtioDeviceFeaturesOptionsMem:
#
# The options that apply to Virtio mem devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsMem',
  'data': { 'features': [ 'VirtioMemFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsSerial:
#
# The options that apply to Virtio serial devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsSerial',
  'data': { 'features': [ 'VirtioSerialFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsBlk:
#
# The options that apply to Virtio block devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsBlk',
  'data': { 'features': [ 'VirtioBlkFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsGpu:
#
# The options that apply to Virtio GPU devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsGpu',
  'data': { 'features': [ 'VirtioGpuFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsNet:
#
# The options that apply to Virtio net devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsNet',
  'data': { 'features': [ 'VirtioNetFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsScsi:
#
# The options that apply to Virtio SCSI devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsScsi',
  'data': { 'features': [ 'VirtioScsiFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsBalloon:
#
# The options that apply to Virtio balloon devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsBalloon',
  'data': { 'features': [ 'VirtioBalloonFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsIommu:
#
# The options that apply to Virtio IOMMU devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsIommu',
  'data': { 'features': [ 'VirtioIommuFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsInput:
#
# The options that apply to Virtio input devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsInput',
  'data': { 'features': [ 'VirtioInputFeature' ] } }

##
# @VhostDeviceFeaturesOptionsFs:
#
# The options that apply to vhost-user-fs devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VhostDeviceFeaturesOptionsFs',
  'data': { 'features': [ 'VhostUserFsFeature' ] } }

##
# @VhostDeviceFeaturesOptionsVsock:
#
# The options that apply to vhost-vsock devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VhostDeviceFeaturesOptionsVsock',
  'data': { 'features': [ 'VhostVsockFeature' ] } }

##
# @VirtioDeviceFeaturesOptionsCrypto:
#
# The options that apply to virtio-crypto devices
#
# @features: List of device features
#
# Since: 6.3
##

{ 'struct': 'VirtioDeviceFeaturesOptionsCrypto',
  'data': { 'features': [ 'VirtioCryptoFeature' ] } }

##
# @VirtioDeviceFeatures:
#
# A union to define the list of features for a virtio device
#
# Since: 6.3
##

{ 'union': 'VirtioDeviceFeatures',
  'base': 'VirtioDeviceFeaturesBase',
  'discriminator': 'type',
  'data': { 'virtio-serial': 'VirtioDeviceFeaturesOptionsSerial',
            'virtio-blk': 'VirtioDeviceFeaturesOptionsBlk',
            'virtio-gpu': 'VirtioDeviceFeaturesOptionsGpu',
            'virtio-net': 'VirtioDeviceFeaturesOptionsNet',
            'virtio-scsi': 'VirtioDeviceFeaturesOptionsScsi',
            'virtio-balloon': 'VirtioDeviceFeaturesOptionsBalloon',
            'virtio-iommu': 'VirtioDeviceFeaturesOptionsIommu',
            'virtio-input': 'VirtioDeviceFeaturesOptionsInput',
            'vhost-user-fs': 'VhostDeviceFeaturesOptionsFs',
            'vhost-vsock': 'VhostDeviceFeaturesOptionsVsock',
            'virtio-crypto': 'VirtioDeviceFeaturesOptionsCrypto',
            'virtio-mem': 'VirtioDeviceFeaturesOptionsMem' } }

##
# @VhostStatus:
#
# Information about a vhost device. This information will only be
# displayed if the vhost device is active.
#
# @n-mem-sections: vhost_dev n_mem_sections
#
# @n-tmp-sections: vhost_dev n_tmp_sections
#
# @nvqs: vhost_dev nvqs. This is the number of virtqueues being used
#        by the vhost device.
#
# @vq-index: vhost_dev vq_index
#
# @features: vhost_dev features
#
# @acked-features: vhost_dev acked_features
#
# @backend-features: vhost_dev backend_features
#
# @protocol-features: vhost_dev protocol_features
#
# @max-queues: vhost_dev max_queues
#
# @backend-cap: vhost_dev backend_cap
#
# @log-enabled: vhost_dev log_enabled flag
#
# @log-size: vhost_dev log_size
#
# Since: 6.3
#
##

{ 'struct': 'VhostStatus',
  'data': { 'n-mem-sections': 'int',
            'n-tmp-sections': 'int',
            'nvqs': 'uint32',
            'vq-index': 'int',
            'features': 'VirtioDeviceFeatures',
            'acked-features': 'VirtioDeviceFeatures',
            'backend-features': 'VirtioDeviceFeatures',
            'protocol-features': 'VhostDeviceProtocols',
            'max-queues': 'uint64',
            'backend-cap': 'uint64',
            'log-enabled': 'bool',
            'log-size': 'uint64' } }

##
# @VirtioStatus:
#
# Full status of the virtio device with most VirtIODevice members.
# Also includes the full status of the corresponding vhost device
# if the vhost device is active.
#
# @name: VirtIODevice name
#
# @device-id: VirtIODevice ID
#
# @vhost-started: VirtIODevice vhost_started flag
#
# @guest-features: VirtIODevice guest_features
#
# @host-features: VirtIODevice host_features
#
# @backend-features: VirtIODevice backend_features
#
# @device-endian: VirtIODevice device_endian
#
# @num-vqs: VirtIODevice virtqueue count. This is the number of active
#           virtqueues being used by the VirtIODevice.
#
# @status: VirtIODevice configuration status (e.g. DRIVER_OK,
#          FEATURES_OK, DRIVER, etc.)
#
# @isr: VirtIODevice ISR
#
# @queue-sel: VirtIODevice queue_sel
#
# @vm-running: VirtIODevice vm_running flag
#
# @broken: VirtIODevice broken flag
#
# @disabled: VirtIODevice disabled flag
#
# @use-started: VirtIODevice use_started flag
#
# @started: VirtIODevice started flag
#
# @start-on-kick: VirtIODevice start_on_kick flag
#
# @disable-legacy-check: VirtIODevice disabled_legacy_check flag
#
# @bus-name: VirtIODevice bus_name
#
# @use-guest-notifier-mask: VirtIODevice use_guest_notifier_mask flag
#
# @vhost-dev: corresponding vhost device info for a given VirtIODevice
#
# Since: 6.3
#
##

{ 'struct': 'VirtioStatus',
  'data': { 'name': 'str',
            'device-id': 'uint16',
            'vhost-started': 'bool',
            'guest-features': 'VirtioDeviceFeatures',
            'host-features': 'VirtioDeviceFeatures',
            'backend-features': 'VirtioDeviceFeatures',
            'device-endian': 'VirtioStatusEndianness',
            'num-vqs': 'int',
            'status': 'VirtioDeviceStatus',
            'isr': 'uint8',
            'queue-sel': 'uint16',
            'vm-running': 'bool',
            'broken': 'bool',
            'disabled': 'bool',
            'use-started': 'bool',
            'started': 'bool',
            'start-on-kick': 'bool',
            'disable-legacy-check': 'bool',
            'bus-name': 'str',
            'use-guest-notifier-mask': 'bool',
            '*vhost-dev': 'VhostStatus' } }

##
# @x-query-virtio-status:
#
# Poll for a comprehensive status of a given virtio device
#
# @path: Canonical QOM path of the VirtIODevice
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: VirtioStatus of the virtio device
#
# Since: 6.3
#
# Examples:
#
# 1. Poll for the status of virtio-crypto (no vhost-crypto active)
#
# -> { "execute": "x-query-virtio-status",
#      "arguments": { "path": "/machine/peripheral/crypto0/virtio-backend" }
#    }
# <- { "return": {
#          "device-endian": "little",
#          "bus-name": "",
#          "disable-legacy-check": false,
#          "name": "virtio-crypto",
#          "started": true,
#          "device-id": 20,
#          "backend-features": {
#               "transport": [],
#               "type": "virtio-crypto",
#               "features": []
#          },
#          "start-on-kick": false,
#          "isr": 1,
#          "broken": false,
#          "status": {
#               "dev-status": ["acknowledge", "driver", "features-ok",
#                              "driver-ok"]
#          },
#          "num-vqs": 2,
#          "guest-features": {
#               "transport": ["event-idx", "indirect-desc", "version-1"],
#               "type": "virtio-crypto",
#               "features": []
#          },
#          "host-features": {
#               "transport": ["protocol-features", "event-idx",
#                             "indirect-desc", "version-1", "any-layout",
#                             "notify-on-empty"],
#               "type": "virtio-crypto",
#               "features": []
#          },
#          "use-guest-notifier-mask": true,
#          "vm-running": true,
#          "queue-sel": 1,
#          "disabled": false,
#          "vhost-started": false,
#          "use-started": true
#      }
#    }
#
# 2. Poll for the status of virtio-net (vhost-net is active)
#
# -> { "execute": "x-query-virtio-status",
#      "arguments": { "path": "/machine/peripheral-anon/device[1]/virtio-backend" }
#    }
# <- { "return": {
#          "device-endian": "little",
#          "bus-name": "",
#          "disabled-legacy-check": false,
#          "name": "virtio-net",
#          "started": true,
#          "device-id": 1,
#          "vhost-dev": {
#               "n-tmp-sections": 4,
#               "n-mem-sections": 4,
#               "max-queues": 1,
#               "backend-cap": 2,
#               "log-size": 0,
#               "backend-features": {
#                       "transport": [],
#                       "type": "virtio-net",
#                       "features": []
#               },
#               "nvqs": 2,
#               "protocol-features": {
#                       "features": []
#               },
#               "vq-index": 0,
#               "log-enabled": false,
#               "acked-features": {
#                       "transport": ["event-idx", "indirect-desc", "version-1",
#                                     "any-layout", "notify-on-empty"],
#                       "type": "virtio-net",
#                       "features": ["mrg-rxbuf"]
#               },
#               "features": {
#                       "transport": ["event-idx", "indirect-desc",
#                                     "iommu-platform", "version-1", "any-layout",
#                                     "notify-on-empty"],
#                       "type": "virtio-net",
#                       "features": ["log-all", "mrg-rxbuf"]
#               }
#          },
#          "backend-features": {
#               "transport": ["protocol-features", "event-idx", "indirect-desc",
#                             "version-1", "any-layout", "notify-on-empty"],
#               "type": "virtio-net",
#               "features": ["gso", "ctrl-mac-addr", "guest-announce", "ctrl-rx-extra",
#                            "ctrl-vlan", "ctrl-rx", "ctrl-vq", "status", "mrg-rxbuf",
#                            "host-ufo", "host-ecn", "host-tso6", "host-tso4",
#                            "guest-ufo", "guest-ecn", "guest-tso6", "guest-tso4",
#                            "mac", "ctrl-guest-offloads", "guest-csum", "csum"]
#          },
#          "start-on-kick": false,
#          "isr": 1,
#          "broken": false,
#          "status": {
#               "dev-status": ["acknowledge", "driver", "features-ok", "driver-ok"]
#          },
#          "num-vqs": 3,
#          "guest-features": {
#               "transport": ["event-idx", "indirect-desc", "version-1"],
#               "type": "virtio-net",
#               "features": ["ctrl-mac-addr", "guest-announce", "ctrl-vlan",
#                            "ctrl-rx", "ctrl-vq", "status", "mrg-rxbuf",
#                            "host-ufo", "host-ecn", "host-tso6",
#                            "host-tso4", "guest-ufo", "guest-ecn",
#                            "guest-tso6", "guest-tso4", "mac",
#                            "ctrl-guest-offloads", "guest-csum", "csum"]
#          },
#          "host-features": {
#               "transport": ["protocol-features", "event-idx",
#                             "indirect-desc", "version-1", "any-layout",
#                             "notify-on-empty"],
#               "type": "virtio-net",
#               "features": ["gso", "ctrl-mac-addr", "guest-announce",
#                            "ctrl-rx-extra", "ctrl-vlan", "ctrl-rx",
#                            "ctrl-vq", "status", "mrg-rxbuf", "host-ufo",
#                            "host-ecn", "host-tso6", "host-tso4",
#                            "guest-ufo", "guest-ecn", "guest-tso6",
#                            "guest-tso4", "mac", "ctrl-guest-offloads",
#                            "guest-csum", "csum"]
#          },
#          "use-guest-notifier-mask": true,
#          "vm-running": true,
#          "queue-sel": 2,
#          "disabled": false,
#          "vhost-started": true,
#          "use-started": true
#      }
#    }
#
##

{ 'command': 'x-query-virtio-status', 'data': { 'path': 'str' },
  'returns': 'VirtioStatus', 'features': [ 'unstable' ] }

##
# @VirtQueueStatus:
#
# Information of a VirtIODevice VirtQueue, including most members of
# VirtQueue data structure.
#
# @device-name: Name of the VirtIODevice which this VirtQueue belongs
#               to
#
# @queue-index: VirtQueue queue_index
#
# @inuse: VirtQueue inuse
#
# @vring-num: VirtQueue vring.num
#
# @vring-num-default: VirtQueue vring.num_default
#
# @vring-align: VirtQueue vring.align
#
# @vring-desc: VirtQueue vring.desc (descriptor area)
#
# @vring-avail: VirtQueue vring.avail (driver area)
#
# @vring-used: VirtQueue vring.used (device area)
#
# @last-avail-idx: VirtQueue last_avail_idx or return of vhost_dev
#                  vhost_get_vring_base (if vhost active)
#
# @shadow-avail-idx: VirtQueue shadow_avail_idx
#
# @used-idx: VirtQueue used_idx
#
# @signalled-used: VirtQueue signalled_used
#
# @signalled-used-valid: VirtQueue signalled_used_valid flag
#
# Since: 6.3
#
##

{ 'struct': 'VirtQueueStatus',
  'data': { 'device-name': 'str',
            'queue-index': 'uint16',
            'inuse': 'uint32',
            'vring-num': 'uint32',
            'vring-num-default': 'uint32',
            'vring-align': 'uint32',
            'vring-desc': 'uint64',
            'vring-avail': 'uint64',
            'vring-used': 'uint64',
            '*last-avail-idx': 'uint16',
            '*shadow-avail-idx': 'uint16',
            'used-idx': 'uint16',
            'signalled-used': 'uint16',
            'signalled-used-valid': 'bool' } }

##
# @x-query-virtio-queue-status:
#
# Return the status of a given VirtIODevice VirtQueue
#
# @path: VirtIO device canonical QOM path
#
# @queue: VirtQueue index to examine
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: VirtQueueStatus of the VirtQueue
#
# Notes: last_avail_idx will not be displayed in the case where
#        the selected VirtIODevice has a running vhost device
#        and the VirtIODevice VirtQueue index (queue) does not
#        exist for the corresponding vhost device vhost_virtqueue.
#        Also, shadow_avail_idx will not be displayed in the case
#        where the selected VirtIODevice has a running vhost device.
#
# Since: 6.3
#
# Examples:
#
# 1. Get VirtQueue status for virtio-vsock (vhost-vsock running)
#
# -> { "execute": "x-query-virtio-queue-status",
#      "arguments": { "path": "/machine/peripheral/vsock0/virtio-backend",
#                     "queue": 1 }
#    }
# <- { "return": { "signalled-used": 0,
#                  "inuse": 0,
#                  "vring-align": 4096,
#                  "vring-desc": 5217370112,
#                  "signalled-used-valid": false,
#                  "vring-num-default": 128,
#                  "vring-avail": 5217372160,
#                  "queue-index": 1,
#                  "last-avail-idx": 0,
#                  "vring-used": 5217372480,
#                  "used-idx": 0,
#                  "device-name": "vhost-vsock",
#                  "vring-num": 128 }
#    }
#
# 2. Get VirtQueue status for virtio-serial (no vhost)
#
# -> { "execute": "x-query-virtio-queue-status",
#      "arguments": { "path": "/machine/peripheral-anon/device[0]/virtio-backend",
#                     "queue": 20 }
#    }
# <- { "return": { "signalled-used": 0,
#                  "inuse": 0,
#                  "vring-align": 4096,
#                  "vring-desc": 5182074880,
#                  "signalled-used-valid": false,
#                  "vring-num-default": 128,
#                  "vring-avail": 5182076928,
#                  "queue-index": 20,
#                  "last-avail-idx": 0,
#                  "vring-used": 5182077248,
#                  "used-idx": 0,
#                  "device-name": "virtio-serial",
#                  "shadow-avail-idx": 0,
#                  "vring-num": 128 }
#    }
#
##

{ 'command': 'x-query-virtio-queue-status',
  'data': { 'path': 'str', 'queue': 'uint16' },
  'returns': 'VirtQueueStatus', 'features': [ 'unstable' ] }

##
# @VirtVhostQueueStatus:
#
# Information of a vhost device vhost_virtqueue, including most members of
# the vhost_dev vhost_virtqueue data structure.
#
# @device-name: Name of the VirtIODevice which this vhost_virtqueue
#               belongs to
#
# @kick: vhost_virtqueue kick
#
# @call: vhost_virtqueue call
#
# @desc: vhost_virtqueue desc
#
# @avail: vhost_virtqueue avail
#
# @used: vhost_virtqueue used
#
# @num: vhost_virtqueue num
#
# @desc-phys: vhost_virtqueue desc_phys (descriptor area physical
#             address)
#
# @desc-size: vhost_virtqueue desc_size (descriptor size)
#
# @avail-phys: vhost_virtqueue avail_phys (driver area physical
#              address)
#
# @avail-size: vhost_virtqueue avail_size
#
# @used-phys: vhost_virtqueue used_phys (device area physical address)
#
# @used-size: vhost_virtqueue used_size
#
# Since: 6.3
#
##

{ 'struct': 'VirtVhostQueueStatus',
  'data': { 'device-name': 'str',
            'kick': 'int',
            'call': 'int',
            'desc': 'uint64',
            'avail': 'uint64',
            'used': 'uint64',
            'num': 'int',
            'desc-phys': 'uint64',
            'desc-size': 'uint32',
            'avail-phys': 'uint64',
            'avail-size': 'uint32',
            'used-phys': 'uint64',
            'used-size': 'uint32' } }

##
# @x-query-virtio-vhost-queue-status:
#
# Return information of a given vhost device vhost_virtqueue
#
# @path: VirtIODevice canonical QOM path
#
# @queue: vhost_virtqueue index to examine
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: VirtVhostQueueStatus of the vhost_virtqueue
#
# Since: 6.3
#
# Examples:
#
# 1. Get vhost_virtqueue status for vhost-crypto
#
# -> { "execute": "x-query-virtio-vhost-queue-status",
#      "arguments": { "path": "/machine/peripheral/crypto0/virtio-backend",
#                     "queue": 0 }
#    }
# <- { "return": { "avail-phys": 5216124928,
#                  "used-phys": 5216127040,
#                  "avail-size": 2054,
#                  "desc-size": 16384,
#                  "used-size": 8198,
#                  "desc": 140141447430144,
#                  "num": 1024,
#                  "device-name": "virtio-crypto",
#                  "call": 0,
#                  "avail": 140141447446528,
#                  "desc-phys": 5216108544,
#                  "used": 140141447448640,
#                  "kick": 0 }
#    }
#
# 2. Get vhost_virtqueue status for vhost-vsock
#
# -> { "execute": "x-query-virtio-vhost-queue-status",
#      "arguments": { "path": "/machine/peripheral/vsock0/virtio-backend",
#                     "queue": 0 }
#    }
# <- { "return": { "avail-phys": 5182261248,
#                  "used-phys": 5182261568,
#                  "avail-size": 262,
#                  "desc-size": 2048,
#                  "used-size": 1030,
#                  "desc": 140141413580800,
#                  "num": 128,
#                  "device-name": "vhost-vsock",
#                  "call": 0,
#                  "avail": 140141413582848,
#                  "desc-phys": 5182259200,
#                  "used": 140141413583168,
#                  "kick": 0 }
#    }
#
##

{ 'command': 'x-query-virtio-vhost-queue-status',
  'data': { 'path': 'str', 'queue': 'uint16' },
  'returns': 'VirtVhostQueueStatus', 'features': [ 'unstable' ] }

##
# @VirtioRingDescFlags:
#
# An enumeration of the virtio ring descriptor flags
#
# Since: 6.3
#
##

{ 'enum': 'VirtioRingDescFlags',
  'data': [ 'next', 'write', 'indirect', 'avail', 'used' ]
}

##
# @VirtioRingDesc:
#
# Information regarding the VRing descriptor area
#
# @addr: guest physical address of the descriptor data
#
# @len: length of the descriptor data
#
# @flags: list of descriptor flags
#
# Since: 6.3
#
##

{ 'struct': 'VirtioRingDesc',
  'data': { 'addr': 'uint64',
            'len': 'uint32',
            'flags': [ 'VirtioRingDescFlags' ] } }

##
# @VirtioRingAvail:
#
# Information regarding the avail VRing (also known as the driver
# area)
#
# @flags: VRingAvail flags
#
# @idx: VRingAvail index
#
# @ring: VRingAvail ring[] entry at provided index
#
# Since: 6.3
#
##

{ 'struct': 'VirtioRingAvail',
  'data': { 'flags': 'uint16',
            'idx': 'uint16',
            'ring': 'uint16' } }

##
# @VirtioRingUsed:
#
# Information regarding the used VRing (also known as the device
# area)
#
# @flags: VRingUsed flags
#
# @idx: VRingUsed index
#
# Since: 6.3
#
##

{ 'struct': 'VirtioRingUsed',
  'data': { 'flags': 'uint16',
            'idx': 'uint16' } }

##
# @VirtioQueueElement:
#
# Information regarding a VirtQueue VirtQueueElement including
# descriptor, driver, and device areas
#
# @device-name: name of the VirtIODevice which this VirtQueue belongs
#               to (for reference)
#
# @index: index of the element in the queue
#
# @ndescs: number of descriptors
#
# @descs: list of the descriptors
#
# @avail: VRingAvail info
#
# @used: VRingUsed info
#
# Since: 6.3
#
##

{ 'struct': 'VirtioQueueElement',
  'data': { 'device-name': 'str',
            'index': 'uint32',
            'ndescs': 'uint32',
            'descs': [ 'VirtioRingDesc' ],
            'avail': 'VirtioRingAvail',
            'used': 'VirtioRingUsed' } }

##
# @x-query-virtio-queue-element:
#
# Return the information about a VirtQueue VirtQueueElement (by
# default looks at the head of the queue)
#
# @path: VirtIODevice canonical QOM path
#
# @queue: VirtQueue index to examine
#
# @index: the index in the queue, by default head
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: VirtioQueueElement information
#
# Since: 6.3
#
# Examples:
#
# 1. Introspect on virtio-net virtqueue 0 at index 5
#
# -> { "execute": "x-query-virtio-queue-element",
#      "arguments": { "path": "/machine/peripheral-anon/device[1]/virtio-backend",
#                     "queue": 0,
#                     "index": 5 }
#    }
# <- { "return": {
#         "index": 5,
#         "ndescs": 1,
#         "device-name": "virtio-net",
#         "descs": [ { "flags": ["write"], "len": 1536, "addr": 5257305600 } ],
#         "avail": { "idx": 256, "flags": 0, "ring": 5 },
#         "used": { "idx": 13, "flags": 0 } }
#    }
#
# 2. Introspect on virtio-crypto virtqueue 1 at head
#
# -> { "execute": "x-query-virtio-queue-element",
#      "arguments": { "path": "/machine/peripheral/crypto0/virtio-backend",
#                     "queue": 1 }
#    }
# <- { "return": {
#         "index": 0,
#         "ndescs": 1,
#         "device-name": "virtio-crypto",
#         "descs": [ { "flags": [], "len": 0, "addr": 8080268923184214134 } ],
#         "avail": { "idx": 280, "flags": 0, "ring": 0 },
#         "used": { "idx": 280, "flags": 0 } }
#    }
#
# 3. Introspect on virtio-scsi virtqueue 2 at head
#
# -> { "execute": "x-query-virtio-queue-element",
#      "arguments": { "path": "/machine/peripheral-anon/device[2]/virtio-backend",
#                     "queue": 2 }
#    }
# <- { "return": {
#         "index": 19,
#         "ndescs": 1,
#         "device-name": "virtio-scsi",
#         "descs": [ { "flags": ["used", "indirect", "write"], "len": 4099327944,
#                      "addr": 12055409292258155293 } ],
#         "avail": { "idx": 1147, "flags": 0, "ring": 19 },
#         "used": { "idx": 1147, "flags": 0 } }
#    }
#
##

{ 'command': 'x-query-virtio-queue-element',
  'data': { 'path': 'str', 'queue': 'uint16', '*index': 'uint16' },
  'returns': 'VirtioQueueElement', 'features': [ 'unstable' ] }
