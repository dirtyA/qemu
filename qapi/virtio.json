# -*- Mode: Python -*-
# vim: filetype=python
#

##
# = Virtio devices
##

##
# @VirtioInfo:
#
# Basic information about a given VirtIODevice
#
# @path: The VirtIODevice's canonical QOM path
#
# @name: Name of the VirtIODevice
#
# Since: 7.0
#
##
{ 'struct': 'VirtioInfo',
  'data': { 'path': 'str',
            'name': 'str' } }

##
# @x-query-virtio:
#
# Returns a list of all realized VirtIODevices
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: List of gathered VirtIODevices
#
# Since: 7.0
#
# Example:
#
# -> { "execute": "x-query-virtio" }
# <- { "return": [
#        {
#            "path": "/machine/peripheral-anon/device[4]/virtio-backend",
#            "name": "virtio-input"
#        },
#        {
#            "path": "/machine/peripheral/crypto0/virtio-backend",
#            "name": "virtio-crypto"
#        },
#        {
#            "path": "/machine/peripheral-anon/device[2]/virtio-backend",
#            "name": "virtio-scsi"
#        },
#        {
#            "path": "/machine/peripheral-anon/device[1]/virtio-backend",
#            "name": "virtio-net"
#        },
#        {
#            "path": "/machine/peripheral-anon/device[0]/virtio-backend",
#            "name": "virtio-serial"
#        }
#      ]
#    }
#
##

{ 'command': 'x-query-virtio',
  'returns': [ 'VirtioInfo' ],
  'features': [ 'unstable' ] }

##
# @VhostStatus:
#
# Information about a vhost device. This information will only be
# displayed if the vhost device is active.
#
# @n-mem-sections: vhost_dev n_mem_sections
#
# @n-tmp-sections: vhost_dev n_tmp_sections
#
# @nvqs: vhost_dev nvqs (number of virtqueues being used)
#
# @vq-index: vhost_dev vq_index
#
# @features: vhost_dev features
#
# @acked-features: vhost_dev acked_features
#
# @backend-features: vhost_dev backend_features
#
# @protocol-features: vhost_dev protocol_features
#
# @max-queues: vhost_dev max_queues
#
# @backend-cap: vhost_dev backend_cap
#
# @log-enabled: vhost_dev log_enabled flag
#
# @log-size: vhost_dev log_size
#
# Since: 7.0
#
##

{ 'struct': 'VhostStatus',
  'data': { 'n-mem-sections': 'int',
            'n-tmp-sections': 'int',
            'nvqs': 'uint32',
            'vq-index': 'int',
            'features': 'VirtioDeviceFeatures',
            'acked-features': 'VirtioDeviceFeatures',
            'backend-features': 'VirtioDeviceFeatures',
            'protocol-features': 'VhostDeviceProtocols',
            'max-queues': 'uint64',
            'backend-cap': 'uint64',
            'log-enabled': 'bool',
            'log-size': 'uint64' } }

##
# @VirtioStatus:
#
# Full status of the virtio device with most VirtIODevice members.
# Also includes the full status of the corresponding vhost device
# if the vhost device is active.
#
# @name: VirtIODevice name
#
# @device-id: VirtIODevice ID
#
# @vhost-started: VirtIODevice vhost_started flag
#
# @guest-features: VirtIODevice guest_features
#
# @host-features: VirtIODevice host_features
#
# @backend-features: VirtIODevice backend_features
#
# @device-endian: VirtIODevice device_endian
#
# @num-vqs: VirtIODevice virtqueue count. This is the number of active
#           virtqueues being used by the VirtIODevice.
#
# @status: VirtIODevice configuration status (VirtioDeviceStatus)
#
# @isr: VirtIODevice ISR
#
# @queue-sel: VirtIODevice queue_sel
#
# @vm-running: VirtIODevice vm_running flag
#
# @broken: VirtIODevice broken flag
#
# @disabled: VirtIODevice disabled flag
#
# @use-started: VirtIODevice use_started flag
#
# @started: VirtIODevice started flag
#
# @start-on-kick: VirtIODevice start_on_kick flag
#
# @disable-legacy-check: VirtIODevice disabled_legacy_check flag
#
# @bus-name: VirtIODevice bus_name
#
# @use-guest-notifier-mask: VirtIODevice use_guest_notifier_mask flag
#
# @vhost-dev: Corresponding vhost device info for a given VirtIODevice.
#             Present if the given VirtIODevice has an active vhost
#             device.
#
# Since: 7.0
#
##

{ 'struct': 'VirtioStatus',
  'data': { 'name': 'str',
            'device-id': 'uint16',
            'vhost-started': 'bool',
            'device-endian': 'str',
            'guest-features': 'VirtioDeviceFeatures',
            'host-features': 'VirtioDeviceFeatures',
            'backend-features': 'VirtioDeviceFeatures',
            'num-vqs': 'int',
            'status': 'VirtioDeviceStatus',
            'isr': 'uint8',
            'queue-sel': 'uint16',
            'vm-running': 'bool',
            'broken': 'bool',
            'disabled': 'bool',
            'use-started': 'bool',
            'started': 'bool',
            'start-on-kick': 'bool',
            'disable-legacy-check': 'bool',
            'bus-name': 'str',
            'use-guest-notifier-mask': 'bool',
            '*vhost-dev': 'VhostStatus' } }

##
# @x-query-virtio-status:
#
# Poll for a comprehensive status of a given virtio device
#
# @path: Canonical QOM path of the VirtIODevice
#
# Features:
# @unstable: This command is meant for debugging.
#
# Returns: VirtioStatus of the virtio device
#
# Since: 7.0
#
# Examples:
#
# 1. Poll for the status of virtio-crypto (no vhost-crypto active)
#
# -> { "execute": "x-query-virtio-status",
#      "arguments": { "path": "/machine/peripheral/crypto0/virtio-backend" }
#    }
# <- { "return": {
#            "device-endian": "little",
#            "bus-name": "",
#            "disable-legacy-check": false,
#            "name": "virtio-crypto",
#            "started": true,
#            "device-id": 20,
#            "backend-features": {
#               "transports": [],
#               "dev-features": []
#            },
#            "start-on-kick": false,
#            "isr": 1,
#            "broken": false,
#            "status": {
#               "statuses": ["ACKNOWLEDGE", "DRIVER", "FEATURES_OK",
#                            "DRIVER_OK"]
#            },
#            "num-vqs": 2,
#            "guest-features": {
#               "transports": ["EVENT_IDX", "INDIRECT_DESC", "VERSION_1"],
#               "dev-features": []
#            },
#            "host-features": {
#               "transports": ["PROTOCOL_FEATURES", "EVENT_IDX",
#                              "INDIRECT_DESC", "VERSION_1", "ANY_LAYOUT",
#                              "NOTIFY_ON_EMPTY"],
#               "dev-features": []
#            },
#            "use-guest-notifier-mask": true,
#            "vm-running": true,
#            "queue-sel": 1,
#            "disabled": false,
#            "vhost-started": false,
#            "use-started": true
#      }
#    }
#
# 2. Poll for the status of virtio-net (vhost-net is active)
#
# -> { "execute": "x-query-virtio-status",
#      "arguments": { "path": "/machine/peripheral-anon/device[1]/virtio-backend" }
#    }
# <- { "return": {
#            "device-endian": "little",
#            "bus-name": "",
#            "disabled-legacy-check": false,
#            "name": "virtio-net",
#            "started": true,
#            "device-id": 1,
#            "vhost-dev": {
#               "n-tmp-sections": 4,
#               "n-mem-sections": 4,
#               "max-queues": 1,
#               "backend-cap": 2,
#               "log-size": 0,
#               "backend-features": {
#                  "transports": [],
#                  "dev-features": []
#               },
#               "nvqs": 2,
#               "protocol-features": {
#                  "protocols": []
#               },
#               "vq-index": 0,
#               "log-enabled": false,
#               "acked-features": {
#                  "transports": ["EVENT_IDX", "INDIRECT_DESC", "VERSION_1",
#                                 "ANY_LAYOUT", "NOTIFY_ON_EMPTY"],
#                  "dev-features": ["MRG_RXBUF"]
#               },
#               "features": {
#                  "transports": ["EVENT_IDX", "INDIRECT_DESC",
#                                 "IOMMU_PLATFORM", "VERSION_1", "ANY_LAYOUT",
#                                 "NOTIFY_ON_EMPTY"],
#                  "dev-features": ["LOG_ALL", "MRG_RXBUF"]
#               }
#            },
#            "backend-features": {
#               "transports": ["PROTOCOL_FEATURES", "EVENT_IDX", "INDIRECT_DESC",
#                              "VERSION_1", "ANY_LAYOUT", "NOTIFY_ON_EMPTY"],
#               "dev-features": ["GSO", "CTRL_MAC_ADDR", "GUEST_ANNOUNCE", "CTRL_RX_EXTRA",
#                                "CTRL_VLAN", "CTRL_RX", "CTRL_VQ", "STATUS", "MRG_RXBUF",
#                                "HOST_UFO", "HOST_ECN", "HOST_TSO6", "HOST_TSO4",
#                                "GUEST_UFO", "GUEST_ECN", "GUEST_TSO6", "GUEST_TSO4",
#                                "MAC", "CTRL_GUEST_OFFLOADS", "GUEST_CSUM", "CSUM"]
#            },
#            "start-on-kick": false,
#            "isr": 1,
#            "broken": false,
#            "status": {
#               "statuses": ["ACKNOWLEDGE", "DRIVER", "FEATURES_OK", "DRIVER_OK"]
#            },
#            "num-vqs": 3,
#            "guest-features": {
#               "transports": ["EVENT_IDX", "INDIRECT_DESC", "VERSION_1"],
#               "dev-features": ["CTRL_MAC_ADDR", "GUEST_ANNOUNCE", "CTRL_VLAN",
#                                "CTRL_RX", "CTRL_VQ", "STATUS", "MRG_RXBUF",
#                                "HOST_UFO", "HOST_ECN", "HOST_TSO6",
#                                "HOST_TSO4", "GUEST_UFO", "GUEST_ECN",
#                                "GUEST_TSO6", "GUEST_TSO4", "MAC",
#                                "CTRL_GUEST_OFFLOADS", "GUEST_CSUM", "CSUM"]
#            },
#            "host-features": {
#               "transports": ["PROTOCOL_FEATURES", "EVENT_IDX",
#                              "INDIRECT_DESC", "VERSION_1", "ANY_LAYOUT",
#                              "NOTIFY_ON_EMPTY"],
#               "dev-features": ["GSO", "CTRL_MAC_ADDR", "GUEST_ANNOUNCE",
#                                "CTRL_RX_EXTRA", "CTRL_VLAN", "CTRL_RX",
#                                "CTRL_VQ", "STATUS", "MRG_RXBUF", "HOST_UFO",
#                                "HOST_ECN", "HOST_TSO4", "HOST_TSO4",
#                                "GUEST_UFO", "GUEST_ECN", "GUEST_TSO6",
#                                "GUEST_TSO4", "MAC", "CTRL_GUEST_OFFLOADS",
#                                "GUEST_CSUM", "CSUM"]
#            },
#            "use-guest-notifier-mask": true,
#            "vm-running": true,
#            "queue-sel": 2,
#            "disabled": false,
#            "vhost-started": true,
#            "use-started": true
#      }
#    }
#
##

{ 'command': 'x-query-virtio-status',
  'data': { 'path': 'str' },
  'returns': 'VirtioStatus',
  'features': [ 'unstable' ] }

##
# @VirtioDeviceStatus:
#
# A structure defined to list the configuration statuses of a virtio
# device
#
# @statuses: List of decoded configuration statuses of the virtio
#            device
#
# @unknown-statuses: Virtio device statuses bitmap that have not been decoded
#
# Since: 7.0
##

{ 'struct': 'VirtioDeviceStatus',
  'data': { 'statuses': [ 'str' ],
            '*unknown-statuses': 'uint8' } }

##
# @VhostDeviceProtocols:
#
# A structure defined to list the vhost user protocol features of a
# Vhost User device
#
# @protocols: List of decoded vhost user protocol features of a vhost
#             user device
#
# @unknown-protocols: Vhost user device protocol features bitmap that
#                     have not been decoded
#
# Since: 7.0
##

{ 'struct': 'VhostDeviceProtocols',
  'data': { 'protocols': [ 'str' ],
            '*unknown-protocols': 'uint64' } }

##
# @VirtioDeviceFeatures:
#
# The common fields that apply to most Virtio devices. Some devices
# may not have their own device-specific features (e.g. virtio-rng).
#
# @transports: List of transport features of the virtio device
#
# @dev-features: List of device-specific features (if the device has
#                unique features)
#
# @unknown-dev-features: Virtio device features bitmap that have not
#                        been decoded
#
# Since: 7.0
##

{ 'struct': 'VirtioDeviceFeatures',
  'data': { 'transports': [ 'str' ],
            '*dev-features': [ 'str' ],
            '*unknown-dev-features': 'uint64' } }
