#
# PowerPC64 system tests
#

BIG_ENDIAN ?= 1

# For now, disable tests that are failing
DISABLED_TESTS := memory
DISABLED_EXTRA_RUNS := run-gdbstub-memory

PPC64_SYSTEM_SRC=$(SRC_PATH)/tests/tcg/ppc64/system
VPATH+=$(PPC64_SYSTEM_SRC)

# These objects provide the basic boot code and helper functions for all tests
CRT_PATH=$(PPC64_SYSTEM_SRC)/lib
CRT_OBJS=boot.o console.o

PPC64_TEST_SRCS=$(wildcard $(PPC64_SYSTEM_SRC)/*.c)
PPC64_TESTS=$(patsubst $(PPC64_SYSTEM_SRC)/%.c, %, $(PPC64_TEST_SRCS))

LINK_SCRIPT=$(CRT_PATH)/powerpc.lds
# NOTE: --build-id is stored before the first code section in the linked
#       binary, which causes problems for most tests, that expect to
#       begin at address 0.
LDFLAGS=-Wl,-T$(LINK_SCRIPT) -Wl,--build-id=none -static -nostdlib \
    $(CRT_OBJS) $(MINILIB_OBJS) -lgcc
TESTS += $(filter-out $(DISABLED_TESTS),$(PPC64_TESTS) $(MULTIARCH_TESTS))
EXTRA_RUNS += $(filter-out $(DISABLED_EXTRA_RUNS),$(MULTIARCH_RUNS))

# NOTE: -Os doesn't work well with -Wl,--oformat=binary
#       Some linker generated functions, such as savegpr*/restgpr*,
#       end up being undefined.
CFLAGS = -O -g -Wall -std=c99 -msoft-float -mno-vsx -mno-altivec \
         -fno-stack-protector -ffreestanding \
         -I $(PPC64_SYSTEM_SRC)/include $(MINILIB_INC) \
         -mcpu=power8

# Each Microwatt/PowerNV test use its own head.S file and thus needs
# different rules.
PPC64_PNV_TESTS = mmu
PPC64_PNV_ELFS = $(addsuffix .elf,$(PPC64_PNV_TESTS))
TESTS += $(PPC64_PNV_TESTS)

# Leave the .elf files, to make debugging easier
.PRECIOUS: $(CRT_OBJS) $(addsuffix .elf,$(TESTS))

# Build CRT and test objects
%.o: $(CRT_PATH)/%.S
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -x assembler-with-cpp -c $< -o $@

%.o: %.S
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -x assembler-with-cpp -c $< -o $@

%.o: $(CRT_PATH)/%.c
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -c $< -o $@

%.o: %.c
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -c $< -o $@

# Build .elf files for debugging
%.elf: %.o $(LINK_SCRIPT) $(CRT_OBJS) $(MINILIB_OBJS)
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ $< $(LDFLAGS)

$(PPC64_PNV_ELFS): %.elf: %-head.o %.o $(LINK_SCRIPT) $(CRT_OBJS) $(MINILIB_OBJS)
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ $< $*.o $(LDFLAGS)

# Build test binaries
%: %.o $(LINK_SCRIPT) $(CRT_OBJS) $(MINILIB_OBJS) %.elf
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ $< $(LDFLAGS) -Wl,--oformat=binary

# NOTE: %-head.o replaces boot.o
$(PPC64_PNV_TESTS): CRT_OBJS = console.o
$(PPC64_PNV_TESTS): %: %-head.o %.o $(LINK_SCRIPT) $(CRT_OBJS) $(MINILIB_OBJS) %.elf
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) -o $@ $< $*.o $(LDFLAGS) -Wl,--oformat=binary

memory: CFLAGS+=-DCHECK_UNALIGNED=1

# Running
QEMU_BASE_MACHINE=-cpu power9 -M powernv9 -m 1G -vga none -nographic
QEMU_OPTS+=$(QEMU_BASE_MACHINE) -serial chardev:output -bios
